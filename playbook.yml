---
- name: CloudWatch Agent Installer Play
  hosts: all
  become: true
  vars:
    temp_dir: /tmp
    region: us-east-2
    cwagent: 
      ubuntu: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
      centos: https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm
    keys: "{{ lookup('file', 'access_keys.json') | from_json }}" 
    run_as: cwagent
    profile_name: default
    log_group: /home/api-product
    metrics_aggregation_interval: 60
    metrics_collection_interval: 30
    monitor_files_default:
      - /var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log
    monitor_merged: "{{ monitor_files + monitor_files_default | unique | list }}"
  handlers:
    - name: restart_agent
      service:
        name: amazon-cloudwatch-agent
        state: restarted
  tasks:
    # TODO add logic to verify download checksum
    - name: download cloud watch logs agent
      get_url:
        url: "{{ cwagent[ansible_distribution | lower] }}"
        dest: "{{ temp_dir }}"

    - name: Install OS specific packages
      include_tasks: "tasks/{{ ansible_distribution | lower}}.yml"
      tags: packages

    - name: set aws profile on cwagent user
      file: 
        path: "/home/{{run_as}}/.aws"
        state: directory
        recurse: yes
        owner: cwagent
        group: cwagent

    - name: generate and push configs       
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: cwagent
        group: cwagent
      loop:
        - { src: credentials.j2, dest: "/home/{{run_as}}/.aws/credentials" }
        - { src: config.j2, dest: "/home/{{run_as}}/.aws/config" }
        - { src: agent.json.j2, dest: "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json" }
        - { src: common-config.toml.j2, dest: "/opt/aws/amazon-cloudwatch-agent/etc/common-config.toml" }
        - { src: log-config.json.j2, dest: "/opt/aws/amazon-cloudwatch-agent/etc/log-config.json" }
      notify: restart_agent

    - name: Make run_as user a member of adm group
      user:
        name: "{{ run_as }}"
        groups: adm
        append: yes

    - name: Make sure run_as user has permission to read files in monitor_merged
      acl:
        path: "{{ item }}"
        entity: adm
        etype: group
        permissions: rX
        state: present
      loop: "{{ monitor_merged }}"
      when: 
        - item != '/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log'

    - name: enable agent
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - amazon-cloudwatch-agent
        #- collectd
